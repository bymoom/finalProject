package com.funding.controller;

import java.io.PrintWriter;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.funding.dto.Qnavo2;
import com.funding.service.QnAService;
import com.funding.util.Summernote;

@Controller
@RequestMapping("/qna/")
public class QnaController2 {
	@Autowired
	private QnAService qnaService;
	public void setQnaService(QnAService qnaService) {
		this.qnaService = qnaService;
	}
	
	@Autowired
	private String summernoteImgPath;
	
	@Autowired
	private String uploadPath;
	
	@RequestMapping("list")
	public ModelAndView qnaList(ModelAndView model)throws Exception{
		List<Qnavo2> list = qnaService.getAllQnAList();
		model.addObject("list",list);
		model.setViewName("qna/list.page");
		return model;
		
	}
	@RequestMapping("detail")
	public ModelAndView qnaDetail(ModelAndView mnv,int qa_num)throws Exception{
		String url="qna/detail.page";
		
		Qnavo2 qna = qnaService.getDetail(qa_num);
		mnv.addObject("qna",qna);
		mnv.setViewName(url);
		return mnv;
	}
	@RequestMapping(value="registForm",method=RequestMethod.GET)
	public ModelAndView registForm(ModelAndView mnv)throws Exception{
		String url="qna/registForm.page";
		
		mnv.setViewName(url);
		String where = "qna";
		mnv.addObject("where",where);
		
		return mnv;
		
	}
	
	@RequestMapping(value="uploadImg", produces="text/plain;charset=utf-8")
	@ResponseBody
	public ResponseEntity<String> uploadImg(MultipartFile file, HttpServletRequest request) throws Exception {
		
		ResponseEntity<String> result = null;

		//System.out.println("upload.getOriginalFilename() : " + file.getOriginalFilename());
		
		/**
		 * summernote 이미지 업로드 용도
		 */
		String savePath = this.summernoteImgPath;
		String where = "qna"; //새로 생성될 폴더명
		Summernote summernote = new Summernote();
		result = summernote.uploadImg(file, request, savePath, where);
		
		return result;
	}
	@RequestMapping(value="deleteImg", produces="text/plain;charset=utf-8")
	@ResponseBody
	public ResponseEntity<String> deleteImg(String fileName, HttpServletRequest request) throws Exception {
		ResponseEntity<String> result = null;
		String savePath = this.summernoteImgPath;
		String where = "qna"; //이미지가 저장되어있는 폴더명
		
		Summernote summernote = new Summernote();
		result = summernote.deleteImg(request, fileName, savePath, where);
		
		return result;
	}
	
	@RequestMapping(value="regist",method=RequestMethod.POST)
	public String regist(Qnavo2 qna)throws Exception{
		String url="qna/regist";
		qnaService.regist(qna);
		return url;
	
	}
	@RequestMapping(value="remove",method=RequestMethod.POST)
	public void remove(int qa_num,HttpServletResponse res)throws Exception{
		qnaService.remove(qa_num);
		
		res.setContentType("text/html;charset=utf-8");
		PrintWriter out = res.getWriter();
		out.println("<script>");
		out.println("alert('게시물이 삭제되었습니다');");
		out.println("location.href='list.page';");
		out.println("</script>");
		
	}
	@RequestMapping(value="modify",method=RequestMethod.GET)
	public ModelAndView modify(int qa_num,ModelAndView mnv)throws Exception{
		String url="qna/modify";
		Qnavo2 qna = qnaService.getDetail(qa_num);
		
		mnv.addObject("qna",qna);
		mnv.setViewName(url);
		String where = "qna";
		mnv.addObject("where",where);
		
		return mnv;
	}
	
	@RequestMapping(value="modify",method=RequestMethod.POST)
	public void nodify(Qnavo2 qna,HttpServletResponse res)throws Exception{
		qnaService.modify(qna);
		
		res.setContentType("text/html;charset=utf-8");
		PrintWriter out = res.getWriter();
		out.println("<script>");
		out.println("alert('게시물이 수정되었습니다');");
//		out.println("window.opener.location.reload();");
		out.println("location.href='detail?qa_num="+qna.getQa_num()+"';");
		out.println("</script>");
	}
	

}
